if defined?(ExceptionNotification)

  require 'exception_notification/rails'
  require 'exception_notification/sidekiq'

  ExceptionNotification.configure do |config|
    # Ignore additional exception types.
    # ActiveRecord::RecordNotFound, Mongoid::Errors::DocumentNotFound, AbstractController::ActionNotFound and ActionController::RoutingError are already added.
    # config.ignored_exceptions += %w{ActionView::TemplateError CustomError}

    # Adds a condition to decide when an exception must be ignored or not.
    # The ignore_if method can be invoked multiple times to add extra conditions.
    # config.ignore_if do |exception, options|
    #   not Rails.env.production?
    # end

    # Ignore exceptions generated by crawlers
    # config.ignore_crawlers %w{Googlebot bingbot}

    # Notifiers =================================================================
    unless Rails.env.development? || Rails.env.test?
      # Email notifier sends notifications by email.
      config.add_notifier :email, {
        email_prefix: "[#{Rails.env.upcase}] [ERROR] ",
        sender_address: %{"Chris Toynbee" <chris@echosight.io>},
        exception_recipients: %w{developer@echosight.io},
      }
      config.add_notifier :slack, {
        webhook_url: Rails.application.credentials.slack[:webhook_url][:errors],
        additional_parameters: {
          mrkdwn: true
        },
      }
    end

    if ENV['DEVELOPMENT_EXCEPTION_NOTIFICATIONS']
      require 'terminal-notifier'

      config.add_notifier :terminal_notifier, lambda { |exception, options|
        message = "Exception occurred: #{exception.message}"

        # Log the error to the Rails log
        Rails.logger.error("**Exception Notification: #{message}")
        Rails.logger.error(exception.backtrace.join("\n")) if exception.backtrace

        # Send desktop notification
        TerminalNotifier.notify(message, title: 'Exception Notification')
      }
    end
  end
end
